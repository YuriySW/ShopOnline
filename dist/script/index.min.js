/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 9:
/***/ (function(__unused_webpack___webpack_module__, __unused_webpack___webpack_exports__, __webpack_require__) {

/* harmony import */ var _modules_timer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(615);
/* harmony import */ var _modules_render_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(212);
/* harmony import */ var _modules_burger_menu_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89);
/* harmony import */ var _modules_dropdownMenu_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(174);
/* harmony import */ var _modules_api_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(154);
/* harmony import */ var _modules_basket_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(526);
/* harmony import */ var _modules_createElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(606);
/* harmony import */ var _modules_card_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(326);









/***/ }),

/***/ 89:
/***/ (function() {

const menuButton = document.querySelector('.menu-btn');
const burgerMenu = document.querySelector('.burger-menu');
const menuBtnBm = document.querySelector('.menu-btn_bm');
const openMenu = () => {
  menuButton.addEventListener('click', () => {
    burgerMenu.classList.toggle('burger-menu-visibility');
    menuButton.style.display = 'none';
    menuBtnBm.style.display = 'block';
  });
};
const closeMenu = event => {
  if (!burgerMenu.contains(event.target) && !menuButton.contains(event.target)) {
    burgerMenu.classList.remove('burger-menu-visibility');
    menuBtnBm.style.display = 'none';
    menuButton.style.display = 'block';
  }
};
document.addEventListener('click', closeMenu);
openMenu();

/***/ }),

/***/ 154:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Kl: function() { return /* binding */ getGoodById; },
/* harmony export */   L1: function() { return /* binding */ category; },
/* harmony export */   z9: function() { return /* binding */ loadGoods; }
/* harmony export */ });
/* harmony import */ var _createElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(606);

const productCards = document.querySelector('.product__cards');
const BASE_URL = 'https://excited-evanescent-macaroni.glitch.me';
const loadGoods = async () => {
  try {
    const url = `${BASE_URL}/api/goods`;
    const result = await fetch(url);
    const response = await result.json();
    if (!response.goods || !Array.isArray(response.goods)) {
      console.error('Некорректный формат данных:', response);
      return;
    }
    productCards.innerHTML = '';
    response.goods.forEach(_createElement_js__WEBPACK_IMPORTED_MODULE_0__/* .renderProductCard */ .Q);
  } catch (error) {
    console.error('Ошибка при загрузке товаров:', error);
  }
};
const getGoodById = async id => {
  try {
    const url = `https://excited-evanescent-macaroni.glitch.me/api/goods/${id}`;
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const good = await response.json();
    return good;
  } catch (error) {
    console.error('Error:', error);
  }
};
const category = async () => {
  try {
    const url = `https://excited-evanescent-macaroni.glitch.me/api/categories`;
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

/***/ }),

/***/ 174:
/***/ (function() {

const buttons = document.querySelectorAll('.footer__title_dr');
function handleToggle(event) {
  buttons.forEach(button => {
    const block = button.closest('.footer__block');
    const list = block.querySelector('.footer__list');
    const openIcon = button.querySelector('.footer__svg-open');
    const closeIcon = button.querySelector('.footer__svg-close');
    if (button.contains(event.target)) {
      const isOpened = list.classList.contains('footer__list-open');
      document.querySelectorAll('.footer__list-open').forEach(openList => {
        openList.classList.remove('footer__list-open');
      });
      document.querySelectorAll('.footer__title_dr.active').forEach(btn => {
        btn.classList.remove('active');
        btn.querySelector('.footer__svg-open').style.display = 'block';
        btn.querySelector('.footer__svg-close').style.display = 'none';
      });
      if (!isOpened) {
        button.classList.add('active');
        list.classList.add('footer__list-open');
        openIcon.style.display = 'none';
        closeIcon.style.display = 'block';
      }
    } else if (!list.contains(event.target)) {
      list.classList.remove('footer__list-open');
      button.classList.remove('active');
      openIcon.style.display = 'block';
      closeIcon.style.display = 'none';
    }
  });
}
function handleResize() {
  if (window.innerWidth >= 632) {
    document.removeEventListener('click', handleToggle);
    buttons.forEach(button => {
      const block = button.closest('.footer__block');
      const list = block.querySelector('.footer__list');
      const openIcon = button.querySelector('.footer__svg-open');
      const closeIcon = button.querySelector('.footer__svg-close');
      list.classList.remove('footer__list-open');
      button.classList.remove('active');
      openIcon.style.display = 'block';
      closeIcon.style.display = 'none';
    });
  } else {
    document.addEventListener('click', handleToggle);
  }
}
handleResize();
window.addEventListener('resize', handleResize);

/***/ }),

/***/ 212:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* unused harmony exports clearItem, loadBlogs, renderArticlePage */
/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(154);
/* harmony import */ var _createElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(606);



const items = document.querySelectorAll('.blogs__item');
const productCards = document.querySelector('.product__cards');
const productTitle = document.querySelector('.product__title');
const logo = document.querySelector('.logo');
logo.addEventListener('click', () => {
  window.location.href = 'index.html';
});
const BASE_URL = 'https://excited-evanescent-macaroni.glitch.me';
const clearItem = () => {
  items.forEach(item => {
    item.remove();
  });
};
clearItem();
const loadBlogs = async () => {
  const result = await fetch('https://gorest.co.in/public-api/posts');
  const response = await result.json();
  const blogsData = response.data;
  const blogsList = document.querySelector('.blogs__list');
  if (blogsList) {
    blogsData.forEach((post, index) => {
      const li = document.createElement('li');
      li.className = 'blogs__item';
      const link = document.createElement('a');
      link.href = '#';
      link.className = 'blogs__link';
      link.setAttribute('aria-label', `Читать статью: ${post.title}`);
      link.innerHTML = `
        <img class="blogs__img" src="https://loremflickr.com/400/400?${index + 1}" alt="${post.title}" />
        <h2 class="blogs__title">${post.title}</h2>
      `;
      link.addEventListener('click', e => {
        e.preventDefault();
        sessionStorage.setItem('selectedTitle', post.title);
        sessionStorage.setItem('selectedText', post.body);
        window.location.href = 'articlePage.html';
      });
      li.appendChild(link);
      blogsList.appendChild(li);
    });
  }
};
const renderArticlePage = () => {
  document.addEventListener('DOMContentLoaded', () => {
    const titlePage = document.querySelector('.title-page');
    const selectedTitle = sessionStorage.getItem('selectedTitle');
    const selectedText = sessionStorage.getItem('selectedText');
    const pageLinkTitle = document.querySelector('.page-link-title');
    const textPageWrap = document.querySelector('.text-page-wrap');
    const backBtn = document.querySelector('.back-btn');
    document.querySelectorAll('.text-page').forEach(item => item.remove());
    if (titlePage && selectedTitle) {
      titlePage.textContent = selectedTitle;
      pageLinkTitle.textContent = selectedTitle;
    }
    if (textPageWrap && selectedText) {
      const p = document.createElement('p');
      p.className = 'text-page';
      p.textContent = selectedText;
      textPageWrap.appendChild(p);
    }
    if (backBtn) {
      backBtn.addEventListener('click', () => {
        window.location.href = 'blog.html';
      });
    }
  });
};
loadBlogs();
renderArticlePage();
const getCategories = async () => {
  const categories = await (0,_api_js__WEBPACK_IMPORTED_MODULE_0__/* .category */ .L1)();
  const footerListCatalogs = document.querySelectorAll('.footer__list_catalog');
  footerListCatalogs.forEach(list => {
    list.innerHTML = '';
    categories.forEach(categoryName => {
      const li = document.createElement('li');
      li.classList.add('footer__item');
      const link = document.createElement('a');
      link.classList.add('footer__link');
      link.href = `category.html?category=${encodeURIComponent(categoryName)}`;
      link.textContent = categoryName;
      if (list.previousElementSibling?.classList.contains('footer__title_bm')) {
        link.classList.add('footer__link_bm');
      }
      li.appendChild(link);
      list.appendChild(li);
    });
  });
};
getCategories();
const getQueryParam = param => {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(param);
};
const loadCategoryGoods = async () => {
  const category = getQueryParam('category');
  if (!category) {
    console.error('Категория не найдена в URL');
    return;
  }
  productTitle.textContent = category;
  try {
    const url = `${BASE_URL}/api/goods`;
    const result = await fetch(url);
    const response = await result.json();
    productCards.innerHTML = '';
    const filteredGoods = response.goods.filter(item => item.category === category);
    if (filteredGoods.length === 0) {
      productCards.innerHTML = '<p>Товары этой категории не найдены.</p>';
      return;
    }
    filteredGoods.forEach(_createElement_js__WEBPACK_IMPORTED_MODULE_1__/* .renderProductCard */ .Q);
  } catch (error) {
    console.error('Ошибка при загрузке товаров:', error);
  }
};
document.addEventListener('DOMContentLoaded', () => {
  const categoryParam = getQueryParam('category');
  if (categoryParam) {
    loadCategoryGoods();
  } else {
    (0,_api_js__WEBPACK_IMPORTED_MODULE_0__/* .loadGoods */ .z9)();
  }
});
document.addEventListener('click', event => {
  const link = event.target.closest('.product__link');
  if (!link) return;
  const productCard = link.closest('.product__card');
  if (!productCard) return;
  const productId = productCard.dataset.id;
  if (!productId) return;
  console.log(productId);
  event.preventDefault();
  window.location.href = `card.html?id=${productId}`;
});

/***/ }),

/***/ 326:
/***/ (function(__unused_webpack___webpack_module__, __unused_webpack___webpack_exports__, __webpack_require__) {

/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(154);
/* harmony import */ var _createElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(606);


if (window.location.pathname.includes('card.html')) {
  const params = new URLSearchParams(window.location.search);
  const productId = params.get('id');
  if (productId) {
    const loadCardGood = async productId => {
      try {
        const card = document.querySelector('.card');
        const pageLinkCategory = document.querySelector('.page-link-category');
        const pageLinkTitle = document.querySelector('.page-link-title');
        if (card) card.innerHTML = '';
        if (pageLinkCategory) pageLinkCategory.textContent = '';
        if (pageLinkTitle) pageLinkTitle.textContent = '';
        const good = await (0,_api_js__WEBPACK_IMPORTED_MODULE_0__/* .getGoodById */ .Kl)(productId);
        if (!good) {
          console.error('Товар не найден');
          return;
        }
        if (pageLinkCategory) {
          pageLinkCategory.textContent = good.category;
          pageLinkCategory.style.cursor = 'pointer';
          pageLinkCategory.addEventListener('click', () => {
            window.location.href = `category.html?category=${encodeURIComponent(good.category)}`;
          });
        }
        if (pageLinkTitle) {
          pageLinkTitle.textContent = good.title;
        }
        if (!card) {
          console.error('Контейнер карточки не найден');
          return;
        }
        (0,_createElement_js__WEBPACK_IMPORTED_MODULE_1__/* .renderCard */ .T)(good);
        const addToBasketBtn = document.querySelector('.card__add-basket-btn');
        if (addToBasketBtn) {
          checkBasketStatus(good.id, addToBasketBtn);
          addToBasketBtn.addEventListener('click', () => addToBasket(good, addToBasketBtn));
        }
      } catch (error) {
        console.error('Ошибка при загрузке товара:', error);
      }
    };
    loadCardGood(productId);
  }
}
const checkBasketStatus = (productId, button) => {
  let basket = JSON.parse(localStorage.getItem('basket')) || [];
  const isInBasket = basket.some(item => item.id === productId);
  if (isInBasket) {
    button.textContent = 'Товар в корзине';
    button.disabled = true;
  }
};
const addToBasket = (good, button) => {
  let basket = JSON.parse(localStorage.getItem('basket')) || [];
  const isInBasket = basket.some(item => item.id === good.id);
  if (isInBasket) return;
  const product = {
    id: good.id,
    image: good.image,
    title: good.title,
    price: good.price,
    discount: good.discount || 0,
    description: good.description,
    count: good.count,
    category: good.category
  };
  basket.push(product);
  localStorage.setItem('basket', JSON.stringify(basket));
  button.textContent = 'Товар в корзине';
  button.disabled = true;
};

/***/ }),

/***/ 526:
/***/ (function() {

const basketBtn = document.querySelector('.basket-btn');
const basketTitle = document.querySelector('.basket__title');
const basketGoodsCount = document.querySelector('.basket__goods-count');
const BASE_URL = 'https://excited-evanescent-macaroni.glitch.me';
const DEFAULT_IMAGE = `image/not-img.jpg`;
basketBtn.addEventListener('click', () => {
  window.location.href = 'basket.html';
});
const countGood = () => {
  const basketCounterMinus = document.querySelectorAll('.basket__counter-minus');
  const basketCounterPlus = document.querySelectorAll('.basket__counter-plus');
  const basketCounterNumbers = document.querySelectorAll('.basket__counter-number');
  const basketData = localStorage.getItem('basket');
  const basket = basketData ? JSON.parse(basketData) : [];
  basketCounterPlus.forEach((plusButton, index) => {
    plusButton.addEventListener('click', () => {
      const counterNumber = basketCounterNumbers[index];
      const currentItem = basket[index];
      let currentValue = parseInt(counterNumber.textContent, 10) || 0;
      const maxCount = currentItem.count || 0;
      if (currentValue < maxCount) {
        currentValue += 1;
        counterNumber.textContent = currentValue;
        basketTotalSum();
        if (!currentItem.countGood) {
          currentItem.countGood = 2;
        } else {
          currentItem.countGood += 1;
        }
        localStorage.setItem('basket', JSON.stringify(basket));
      }
    });
  });
  basketCounterMinus.forEach((minusButton, index) => {
    minusButton.addEventListener('click', () => {
      const counterNumber = basketCounterNumbers[index];
      const currentItem = basket[index];
      let currentValue = parseInt(counterNumber.textContent, 10) || 0;
      if (currentValue > 1) {
        currentValue -= 1;
        counterNumber.textContent = currentValue;
        basketTotalSum();
        if (currentItem.countGood && currentItem.countGood > 1) {
          currentItem.countGood -= 1;
        } else {
          currentItem.countGood = 1;
        }
        localStorage.setItem('basket', JSON.stringify(basket));
      }
    });
  });
};
const basketTotalSum = () => {
  const basketSummaryPrice = document.querySelector('.basket__summary-price');
  const basketSummaryValueNotDiscount = document.querySelector('.basket__summary-value-not-discount');
  const basketSummaryDiscount = document.querySelector('.basket__summary-value-all');
  let totalWithDiscount = 0;
  let totalWithoutDiscount = 0;
  let totalDiscount = 0;
  const basketData = localStorage.getItem('basket');
  const basket = basketData ? JSON.parse(basketData) : [];
  const basketCounterNumbers = document.querySelectorAll('.basket__counter-number');
  basket.forEach((item, index) => {
    const countGoodNum = basketCounterNumbers[index];
    if (!countGoodNum) {
      return;
    }
    let countProduct = Number(countGoodNum.textContent || 1);
    let price = item.price * countProduct;
    const validDiscount = Number(item.discount) || 0;
    const priceWithDiscount = price - price * validDiscount / 100;
    const priceWithoutDiscount = price;
    totalWithDiscount += priceWithDiscount;
    totalWithoutDiscount += Number(priceWithoutDiscount);
    totalDiscount += price - priceWithDiscount;
  });
  totalWithDiscount = Number(totalWithDiscount.toFixed(2));
  totalWithoutDiscount = Number(totalWithoutDiscount.toFixed(2));
  totalDiscount = Number(totalDiscount.toFixed(2));
  if (basketSummaryPrice) basketSummaryPrice.textContent = `${totalWithDiscount} ₽`;
  if (basketSummaryValueNotDiscount) basketSummaryValueNotDiscount.textContent = `${totalWithoutDiscount} ₽`;
  if (basketSummaryDiscount) basketSummaryDiscount.textContent = `${totalDiscount} ₽`;
};
const checkBoxChange = () => {
  const selectAllCheckbox = document.querySelector('.basket__checkbox--all');
  const itemCheckboxes = document.querySelectorAll('.basket__checkbox-choose');
  selectAllCheckbox.addEventListener('change', function () {
    itemCheckboxes.forEach(checkbox => {
      checkbox.checked = selectAllCheckbox.checked;
    });
  });
  const deleteBtn = document.querySelector('.basket__delete-btn');
  deleteBtn.addEventListener('click', function () {
    const checkedItems = document.querySelectorAll('.basket__checkbox-choose:checked');
    let basket = JSON.parse(localStorage.getItem('basket')) || [];
    checkedItems.forEach(checkbox => {
      const itemElement = checkbox.closest('.basket__item');
      const itemId = itemElement.dataset.id;
      basket = basket.filter(item => item.id !== itemId);
      itemElement.remove();
      const imageItem = document.querySelector(`.basket__delivery-image[data-id="${itemId}"]`);
      if (imageItem) {
        imageItem.closest('.basket__delivery-image-item').remove();
      }
    });
    localStorage.setItem('basket', JSON.stringify(basket));
    basketTotalSum();
    updateBasketCount();
  });
};
const imageSub = () => {
  const basketDeliveryImages = document.querySelector('.basket__delivery-images');
  const loadDeliveryImages = () => {
    const basketData = localStorage.getItem('basket');
    const basket = basketData ? JSON.parse(basketData) : [];
    basketDeliveryImages.innerHTML = '';
    basket.forEach(item => {
      const imageUrl = item.image ? `${BASE_URL}/${item.image}` : DEFAULT_IMAGE;
      const listItem = document.createElement('li');
      listItem.classList.add('basket__delivery-image-item');
      listItem.innerHTML = `
      <picture>
  
        <img
        data-id="${item.id}"
          loading="lazy"
          class="basket__delivery-image"
          src="${imageUrl}"
          alt="${item.title}"
          width="420"
          height="295"

        />
      </picture>
    `;
      basketDeliveryImages.appendChild(listItem);
      const img = listItem.querySelector('.basket__delivery-image');
      img.onerror = () => {
        img.src = DEFAULT_IMAGE;
        const picture = img.closest('picture');
        if (picture) {
          picture.querySelectorAll('source').forEach(source => {
            source.srcset = DEFAULT_IMAGE;
          });
        }
      };
    });
  };
  if (window.location.pathname.includes('basket.html')) {
    basketTotalSum();
    loadDeliveryImages();
  }
};
const clearBasketIfEmpty = () => {
  const basket = JSON.parse(localStorage.getItem('basket')) || [];
  if (basket.length === 0) {
    const basketList = document.querySelector('.basket__list');
    const basketDeliveryImages = document.querySelector('.basket__delivery-images');
    const basketSummaryPrice = document.querySelector('.basket__summary-price');
    const basketSummaryValueNotDiscount = document.querySelector('.basket__summary-value-not-discount');
    const basketSummaryDiscount = document.querySelector('.basket__summary-value-all');
    if (basketList) basketList.innerHTML = '';
    if (basketDeliveryImages) basketDeliveryImages.innerHTML = '';
    if (basketSummaryPrice) basketSummaryPrice.textContent = '0 ₽';
    if (basketSummaryValueNotDiscount) basketSummaryValueNotDiscount.textContent = '0 ₽';
    if (basketSummaryDiscount) basketSummaryDiscount.textContent = '0 ₽';
    updateBasketCount();
  }
};
if (window.location.pathname.includes('basket.html')) {
  document.addEventListener('DOMContentLoaded', () => {
    clearBasketIfEmpty();
  });
  const data = localStorage.getItem('basket');
  const basket = data ? JSON.parse(data) : [];
  if (basket.length > 0) {
    const basketList = document.querySelector('.basket__list');
    basketList.innerHTML = '';
    basket.forEach(item => {
      const itemGood = item.countGood ? item.countGood : 1;
      const imageUrl = item.image ? `${BASE_URL}/${item.image}` : DEFAULT_IMAGE;
      const validDiscount = Number(item.discount) || 0;
      const pricePercent = (item.price - item.price * validDiscount / 100).toFixed(0);
      const oldPriceSpan = validDiscount ? ` <span class="basket__price-old">${item.price} ₽</span>` : '';
      const newPrice = validDiscount ? pricePercent : item.price;
      const itemHtml = `
     
               <li class="basket__item" data-id="${item.id}">

                  <input
                    class="basket__checkbox basket__checkbox-choose"
                    type="checkbox"
                    name="all"
                    id="choose-product"
                  />
                  <div class="basket__item-content">
                    <div class="basket__product-info">
                      <picture class="basket__picture">
                   
                        <img
                          loading="lazy"
                          class="basket__image"
                              src="${imageUrl}"
                          alt="ноутбук"
                          width="420"
                          height="295"
                              onerror="this.src='${DEFAULT_IMAGE}'"
                        />
                      </picture>
                      <div class="basket__text">
                        <h2 class="basket__product-title">
                          ${item.title}
                        </h2>
                  
                      </div>
                      <div class="basket__counter">
                        <svg
                          class="basket__counter-minus"
                          aria-label="добавить колличество покупки"
                          tabindex="0"
                          width="36"
                          height="36"
                          viewBox="0 0 36 36"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <circle cx="18" cy="18" r="17.5" fill="white" stroke="#E8E8E8" />
                          <path d="M14.2 18.088H21.08V19.168H14.2V18.088Z" fill="#8F8F8F" />
                        </svg>
                        <span class="basket__counter-number">${itemGood}</span>
                        <svg
                          class="basket__counter-plus"
                          aria-label="уменьшить колличество покупки"
                          tabindex="0"
                          width="36"
                          height="36"
                          viewBox="0 0 36 36"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <circle cx="18" cy="18" r="17.5" fill="white" stroke="#E8E8E8" />
                          <path
                            d="M21.48 19.168H18.216V22.608H17.056V19.168H13.808V18.088H17.056V14.672H18.216V18.088H21.48V19.168Z"
                            fill="#2D2D2D"
                          />
                        </svg>
                      </div>
                      <div class="basket__price">
                        <span class="basket__price-current">${newPrice} ₽</span>
                     ${oldPriceSpan}
                        <span class="basket__price-credit">В кредит от 5600 ₽ </span>
                      </div>
                      <button class="basket__delete-btn basket__delete-btn--sub">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="30"
                          height="30"
                          viewBox="0 0 30 30"
                          fill="none"
                        >
                          <g clip-path="url(#clip0_217_1895)">
                            <path
                              d="M19.0214 5.35355L19.1679 5.5H19.375H23.25V7H6.75V5.5H10.625H10.8321L10.9786 5.35355L12.0821 4.25H17.9179L19.0214 5.35355ZM10 25.75C8.90114 25.75 8 24.8489 8 23.75V9.25H22V23.75C22 24.8489 21.0989 25.75 20 25.75H10Z"
                              fill="#C9C9C9"
                              stroke="#C9C9C9"
                            />
                          </g>
                          <defs>
                            <clipPath id="clip0_217_1895">
                              <rect width="30" height="30" fill="white" />
                            </clipPath>
                          </defs>
                        </svg>
                      </button>
                    </div>
                  </div>
                </li>
                <div class="basket__stripe basket__stripe--sub"></div>
             
      `;
      basketList.insertAdjacentHTML('beforeend', itemHtml);
      imageSub();
      document.addEventListener('DOMContentLoaded', countGood);
      checkBoxChange();
      const updateBasketCount = () => {
        const basket = JSON.parse(localStorage.getItem('basket')) || [];
        const itemCount = basket.length;
        basketTitle.setAttribute('data-number', itemCount);
        basketGoodsCount.textContent = itemCount;
      };
      updateBasketCount();
    });
  }
}

/***/ }),

/***/ 606:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: function() { return /* binding */ renderProductCard; },
/* harmony export */   T: function() { return /* binding */ renderCard; }
/* harmony export */ });
const productCards = document.querySelector('.product__cards');
const card = document.querySelector('.card');
const BASE_URL = 'https://excited-evanescent-macaroni.glitch.me';
const DEFAULT_IMAGE = `image/not-img.jpg`;
const renderProductCard = ({
  id,
  image,
  title,
  price,
  discount
}) => {
  const validDiscount = Number(discount) || 0;
  const imageUrl = image ? `${BASE_URL}/${image}` : DEFAULT_IMAGE;
  const discountSpan = validDiscount ? `<span class="product__discount" aria-live="polite">-${validDiscount}%</span>` : '';
  const pricePercent = (price - price * validDiscount / 100).toFixed(0);
  const oldPriceSpan = validDiscount ? `<span class="product__old-price">${price}₽</span>` : '';
  const newPrice = validDiscount ? pricePercent : price;
  const productHTML = `
     <li class="product__card" data-id="${id}">
       <a class="product__link" href="#">
         <div class="product__wrap">
           ${discountSpan}
        
             <img
               loading="lazy"
               src="${imageUrl}"
               class="product__img"
               alt="${title}"
               width="420"
               height="295"
             />
         
         </div>
         <div class="product__price-wrap">
           <span class="product__price">${newPrice} ₽</span>
           ${oldPriceSpan}
         </div>
         <span class="product__name">${title}</span>
       </a>
     </li>
   `;
  productCards.insertAdjacentHTML('beforeend', productHTML);
  const lastCard = productCards.lastElementChild;
  const img = lastCard.querySelector('img');
  img.onerror = () => {
    img.src = DEFAULT_IMAGE;
    const picture = img.closest('picture');
    if (picture) {
      picture.querySelectorAll('source').forEach(source => {
        source.srcset = DEFAULT_IMAGE;
      });
    }
  };
};
const renderCard = ({
  id,
  image,
  title,
  price,
  discount,
  description,
  count
}) => {
  const validDiscount = Number(discount) || 0;
  const imageUrl = image ? `${BASE_URL}/${image}` : DEFAULT_IMAGE;
  const discountSpan = validDiscount ? `<span class="card__discount-cr" aria-live="polite">${validDiscount}%</span>` : '';
  const pricePercent = (price - price * validDiscount / 100).toFixed(0);
  const oldPriceSpan = validDiscount ? `  <span class="card__product-price-sub">${price} ₽</span>` : '';
  const newPrice = validDiscount ? pricePercent : price;
  const cardHtml = `
          <h1 class="card__title" data-id="${id}">${title}</h1>
          <div class="card__stripe"></div>
          <div class="card__wrapper">
            <div class="card__img-wrap">
                 ${discountSpan}
              <picture>
             
                <img
                  loading="lazy"
                  class="card__image"
                   src="${imageUrl}"
                  alt="${title}"
                  width="757"
                  height="427"
                />
              </picture>
            </div>
            <div class="card__shadow">
              <div class="card__product-card">
                <div class="card__price-wrap">
                  <span class="card__product-price">${newPrice} ₽</span>
                      ${oldPriceSpan}
                
                </div>
                <a href="" class="card__credit-link">В кредит от 5600 ₽ </a>
                <div class="card__favorite-wrap">
                  <button class="card__add-basket-btn" aria-label="добавить в корзину">
                    Добавить в корзину
                  </button>
                  <svg
                    class="card__favorite-ico"
                    aria-label="добавить в избранное"
                    tabindex="0"
                    width="33"
                    height="33"
                    viewBox="0 0 33 33"
                    fill="none"
                  >
                    <g clip-path="url(#clip0_901_1437)">
                      <path
                        d="M22.6875 4.125C20.295 4.125 17.9987 5.23875 16.5 6.99875C15.0012 5.23875 12.705 4.125 10.3125 4.125C6.0775 4.125 2.75 7.4525 2.75 11.6875C2.75 16.885 7.425 21.12 14.5062 27.555L16.5 29.3563L18.4937 27.5413C25.575 21.12 30.25 16.885 30.25 11.6875C30.25 7.4525 26.9225 4.125 22.6875 4.125ZM16.6375 25.5062L16.5 25.6437L16.3625 25.5062C9.8175 19.58 5.5 15.6613 5.5 11.6875C5.5 8.9375 7.5625 6.875 10.3125 6.875C12.43 6.875 14.4925 8.23625 15.2212 10.12H17.7925C18.5075 8.23625 20.57 6.875 22.6875 6.875C25.4375 6.875 27.5 8.9375 27.5 11.6875C27.5 15.6613 23.1825 19.58 16.6375 25.5062Z"
                        fill="#3670C7"
                      />
                    </g>
                    <defs>
                      <clipPath id="clip0_901_1437">
                        <rect width="33" height="33" fill="white" />
                      </clipPath>
                    </defs>
                  </svg>
                </div>
 
                <div class="card__delivery-wrap">
                  <div class="card__delivery-wrap-sub">
                    <span class="card__delivery-text">Доставка</span>
                    <span class="card__delivery-text-sub">1-3 января</span>
                  </div>
                  <div class="card__delivery-wrap-sub">
                    <span class="card__delivery-text">Продавец</span>
                    <span class="card__delivery-text-sub">ShopOnline</span>
                  </div>
                </div>
                <div class="card__notice-wrap">
                  <svg
                    class="card__notice-ico"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                  >
                    <path
                      d="M19 13.586V10C19 6.783 16.815 4.073 13.855 3.258C13.562 2.52 12.846 2 12 2C11.154 2 10.438 2.52 10.145 3.258C7.185 4.074 5 6.783 5 10V13.586L3.293 15.293C3.19996 15.3857 3.12617 15.4959 3.07589 15.6172C3.0256 15.7386 2.99981 15.8687 3 16V18C3 18.2652 3.10536 18.5196 3.29289 18.7071C3.48043 18.8946 3.73478 19 4 19H20C20.2652 19 20.5196 18.8946 20.7071 18.7071C20.8946 18.5196 21 18.2652 21 18V16C21.0002 15.8687 20.9744 15.7386 20.9241 15.6172C20.8738 15.4959 20.8 15.3857 20.707 15.293L19 13.586ZM19 17H5V16.414L6.707 14.707C6.80004 14.6143 6.87383 14.5041 6.92412 14.3828C6.9744 14.2614 7.00019 14.1313 7 14V10C7 7.243 9.243 5 12 5C14.757 5 17 7.243 17 10V14C17 14.266 17.105 14.52 17.293 14.707L19 16.414V17ZM12 22C12.6193 22.0008 13.2235 21.8086 13.7285 21.4502C14.2335 21.0917 14.6143 20.5849 14.818 20H9.182C9.38566 20.5849 9.76648 21.0917 10.2715 21.4502C10.7765 21.8086 11.3807 22.0008 12 22Z"
                      fill="#3670C7"
                    />
                  </svg>
                  <span class="card__notice-text">Узнать о снижении цены</span>
                </div>
              </div>
            </div>
          </div>
          <div class="card__description">
            <h2 class="card__description-title">Описание:</h2>
            <p class="card__description-text">
           ${description}
            </p>
          </div>
        `;
  card.insertAdjacentHTML('beforeend', cardHtml);
  const img = document.querySelector('.card__image');
  img.onerror = () => {
    img.src = DEFAULT_IMAGE;
    const picture = img.closest('picture');
    if (picture) {
      picture.querySelectorAll('source').forEach(source => {
        source.srcset = DEFAULT_IMAGE;
      });
    }
  };
};

/***/ }),

/***/ 615:
/***/ (function() {

if (window.location.pathname.endsWith('/') || window.location.pathname.endsWith('index.html')) {
  const timer = document.querySelector('.timer');
  if (timer) {
    const bannerText = document.querySelector('.banner-text');
    const endPromotion = document.querySelector('.end-promotion');
    const deadline = timer.getAttribute('data-timer-deadline');
    const deadlineDate = new Date(deadline);
    deadlineDate.setHours(deadlineDate.getHours() + 3);
    const getTimeRemaining = endtime => {
      const t = Date.parse(endtime) - Date.parse(new Date());
      const seconds = Math.floor(t / 1000 % 60);
      const minutes = Math.floor(t / 1000 / 60 % 60);
      const hours = Math.floor(t / (1000 * 60 * 60) % 24);
      const days = Math.floor(t / (1000 * 60 * 60 * 24));
      return {
        total: t,
        days,
        hours,
        minutes,
        seconds
      };
    };
    const getDeclension = (num, singular, few, many) => {
      if (num % 10 === 1 && num % 100 !== 11) {
        return singular;
      }
      if ([2, 3, 4].includes(num % 10) && ![12, 13, 14].includes(num % 100)) {
        return few;
      }
      return many;
    };
    const getDaysWord = days => getDeclension(days, 'день', 'дня', 'дней');
    const getHoursWord = hours => getDeclension(hours, 'час', 'часа', 'часов');
    const getMinutesWord = minutes => getDeclension(minutes, 'минута', 'минуты', 'минут');
    const getSecondsWord = seconds => getDeclension(seconds, 'секунда', 'секунды', 'секунд');
    const start = endtime => {
      timer.innerHTML = `
      <time class="timer" datetime="3d 8h 43m"
      ><span class="timer-num timer-num-days">3</span
      ><span class="timer-days-word">дня</span>
      <span class="timer-num timer-num-hours">8</span
      ><span class="timer-hours-word">часов</span>
      <span class="timer-num timer-num-minute">43</span
      ><span class="timer-minute-word">минуты</span></time
    >
           `;
      const timerNumDays = document.querySelector('.timer-num-days');
      const timerDaysWord = document.querySelector('.timer-days-word');
      const timerNumHours = document.querySelector('.timer-num-hours');
      const timerHoursWord = document.querySelector('.timer-hours-word');
      const timerNumMinute = document.querySelector('.timer-num-minute');
      const timerMinuteWord = document.querySelector('.timer-minute-word');
      let timeinterval;
      const updateTimer = () => {
        const t = getTimeRemaining(endtime);
        timerNumDays.textContent = t.days;
        timerNumHours.textContent = String(t.hours).padStart(2, '0');
        timerNumMinute.textContent = String(t.minutes).padStart(2, '0');
        timerDaysWord.textContent = getDaysWord(t.days);
        timerHoursWord.textContent = getHoursWord(t.hours);
        timerMinuteWord.textContent = getMinutesWord(t.minutes);
        if (t.days === 0) {
          timerNumDays.textContent = String(t.hours).padStart(2, '0');
          timerDaysWord.textContent = getHoursWord(t.hours);
          timerNumHours.textContent = String(t.minutes).padStart(2, '0');
          timerHoursWord.textContent = getMinutesWord(t.minutes);
          timerNumMinute.textContent = String(t.seconds).padStart(2, '0');
          timerMinuteWord.textContent = getSecondsWord(t.seconds);
        }
        if (t.total <= 0 || t.days < 0 || t.hours < 0 || t.minutes < 0 || t.seconds < 0) {
          clearInterval(timeinterval);
          bannerText.style.visibility = 'hidden';
          endPromotion.style.visibility = 'hidden';
          timerNumDays.style.visibility = 'hidden';
          timerDaysWord.style.visibility = 'hidden';
          timerNumHours.style.visibility = 'hidden';
          timerHoursWord.style.visibility = 'hidden';
          timerNumMinute.style.visibility = 'hidden';
          timerMinuteWord.style.visibility = 'hidden';
        }
      };
      updateTimer();
      timeinterval = setInterval(updateTimer, 1000);
    };
    start(deadlineDate);
  }
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__(9);
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__(154);
/******/ 	__webpack_require__(526);
/******/ 	__webpack_require__(89);
/******/ 	__webpack_require__(326);
/******/ 	__webpack_require__(606);
/******/ 	__webpack_require__(174);
/******/ 	__webpack_require__(212);
/******/ 	var __webpack_exports__ = __webpack_require__(615);
/******/ 	
/******/ })()
;